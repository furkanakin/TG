#!/usr/bin/env python3
"""
Ä°stek iÅŸleme sÄ±nÄ±fÄ±
Bekleyen istekleri sÃ¼rekli kontrol eder ve iÅŸler
"""

import asyncio
import logging
import threading
from datetime import datetime, timedelta
from typing import List, Dict
from database import db_manager
from telethon_client import telethon_manager

logger = logging.getLogger(__name__)

class RequestProcessor:
    """Ä°stek iÅŸleme sÄ±nÄ±fÄ±"""
    
    def __init__(self, check_interval: int = 30):
        self.check_interval = check_interval  # saniye
        self.is_running = False
        self.process_thread = None
        self.stop_event = threading.Event()
    
    def start(self) -> None:
        """Ä°stek iÅŸleyiciyi baÅŸlatÄ±r"""
        if self.is_running:
            logger.warning("Ä°stek iÅŸleyici zaten Ã§alÄ±ÅŸÄ±yor")
            return
        
        self.is_running = True
        self.stop_event.clear()
        
        # AyrÄ± thread'de Ã§alÄ±ÅŸtÄ±r
        self.process_thread = threading.Thread(target=self._run_loop, daemon=True)
        self.process_thread.start()
        
        logger.info("Ä°stek iÅŸleyici baÅŸlatÄ±ldÄ±")
    
    def stop(self) -> None:
        """Ä°stek iÅŸleyiciyi durdurur"""
        if not self.is_running:
            logger.warning("Ä°stek iÅŸleyici zaten durmuÅŸ")
            return
        
        self.is_running = False
        self.stop_event.set()
        
        if self.process_thread:
            self.process_thread.join(timeout=5)
        
        logger.info("Ä°stek iÅŸleyici durduruldu")
    
    def _run_loop(self) -> None:
        """Ana dÃ¶ngÃ¼ - ayrÄ± thread'de Ã§alÄ±ÅŸÄ±r"""
        while self.is_running and not self.stop_event.is_set():
            try:
                # Asyncio event loop oluÅŸtur
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
                
                # Ä°stekleri iÅŸle
                loop.run_until_complete(self._process_cycle())
                
                # Event loop'u kapat
                loop.close()
                
            except Exception as e:
                logger.error(f"Ä°stek iÅŸleme dÃ¶ngÃ¼sÃ¼ hatasÄ±: {e}")
            
            # Bekle
            self.stop_event.wait(self.check_interval)
    
    async def _process_cycle(self) -> None:
        """Tek iÅŸlem dÃ¶ngÃ¼sÃ¼"""
        try:
            logger.debug("ğŸ”„ Ä°stek iÅŸleme dÃ¶ngÃ¼sÃ¼ baÅŸlatÄ±ldÄ±")
            
            # Bekleyen istekleri iÅŸle (sadece 1 tane, sÄ±ralÄ±)
            processed_count = await telethon_manager.process_pending_requests(limit=1)
            
            if processed_count > 0:
                logger.info(f"âœ… {processed_count} istek baÅŸarÄ±yla iÅŸlendi")
            else:
                logger.debug("ğŸ“­ Ä°ÅŸlenecek istek bulunamadÄ±")
            
            # Eski client'larÄ± temizle (5 dakikadan eski)
            await self._cleanup_old_clients()
            
        except Exception as e:
            logger.error(f"ğŸ’¥ Ä°ÅŸlem dÃ¶ngÃ¼sÃ¼ hatasÄ±: {e}")
    
    async def _cleanup_old_clients(self) -> None:
        """Eski client'larÄ± temizler"""
        try:
            # 5 dakikadan eski client'larÄ± temizle
            await telethon_manager.cleanup_clients()
        except Exception as e:
            logger.error(f"Client temizleme hatasÄ±: {e}")
    
    def get_status(self) -> Dict:
        """Ä°ÅŸleyici durumunu dÃ¶ndÃ¼rÃ¼r"""
        return {
            'is_running': self.is_running,
            'active_clients': telethon_manager.get_active_clients_count(),
            'check_interval': self.check_interval
        }
    
    def force_process(self) -> int:
        """Manuel olarak istekleri iÅŸler"""
        try:
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            
            result = loop.run_until_complete(
                telethon_manager.process_pending_requests(limit=20)
            )
            
            loop.close()
            return result
            
        except Exception as e:
            logger.error(f"Manuel iÅŸleme hatasÄ±: {e}")
            return 0

class RequestScheduler:
    """Ä°stek zamanlayÄ±cÄ± sÄ±nÄ±fÄ±"""
    
    def __init__(self):
        self.processor = RequestProcessor()
    
    def start_processing(self) -> None:
        """Ä°stek iÅŸlemeyi baÅŸlatÄ±r"""
        self.processor.start()
        logger.info("Ä°stek zamanlayÄ±cÄ± baÅŸlatÄ±ldÄ±")
    
    def stop_processing(self) -> None:
        """Ä°stek iÅŸlemeyi durdurur"""
        self.processor.stop()
        logger.info("Ä°stek zamanlayÄ±cÄ± durduruldu")
    
    def get_processing_status(self) -> Dict:
        """Ä°ÅŸleme durumunu dÃ¶ndÃ¼rÃ¼r"""
        return self.processor.get_status()
    
    def force_process_requests(self) -> int:
        """Manuel olarak istekleri iÅŸler"""
        return self.processor.force_process()
    
    def get_channel_stats(self, channel_id: int) -> Dict:
        """Kanal istatistiklerini dÃ¶ndÃ¼rÃ¼r"""
        return db_manager.get_request_stats(channel_id)
    
    def get_pending_requests_count(self) -> int:
        """Bekleyen istek sayÄ±sÄ±nÄ± dÃ¶ndÃ¼rÃ¼r"""
        try:
            requests = db_manager.get_pending_requests(limit=1000)
            return len(requests)
        except Exception as e:
            logger.error(f"Bekleyen istek sayÄ±sÄ± alÄ±namadÄ±: {e}")
            return 0

# Global scheduler instance'Ä±
request_scheduler = RequestScheduler()

if __name__ == "__main__":
    # Test
    scheduler = RequestScheduler()
    
    print("Ä°stek zamanlayÄ±cÄ± test ediliyor...")
    print(f"Durum: {scheduler.get_processing_status()}")
    
    # Manuel iÅŸleme testi
    processed = scheduler.force_process_requests()
    print(f"Manuel iÅŸlenen istek: {processed}")
    
    # Bekleyen istek sayÄ±sÄ±
    pending = scheduler.get_pending_requests_count()
    print(f"Bekleyen istek sayÄ±sÄ±: {pending}")
